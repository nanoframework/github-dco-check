trigger:
  branches:
    include:
    - master
    - develop
    - release/*
  paths:
    exclude:
    - /*.md
    - .gitignore
    - appveyor.yml

pr:
  branches:
    include:
    - master
    - develop
    - release/*
  autoCancel: true

# add nf-tools repo to resources (for Azure Pipelines templates)
resources:
  repositories:
    - repository: templates
      type: github
      name: nanoframework/nf-tools
      endpoint: nfbot

jobs:

##############################
- job: Get_Build_Options
  pool:
    vmImage: 'VS2017-Win2016'

  steps:
  - checkout: self

    # get commint message
  - powershell: |
      git config --global user.email "nfbot"
      git config --global user.name "nanoframework@outlook.com"

      $auth = "basic $([System.Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes(":$(GitHubToken)"))))"

      $commit = Invoke-RestMethod -Uri "https://api.github.com/repos/nanoframework/nf-tools/commits/$(Build.SourceVersion)" -Header @{"Authorization"="$auth"} -ContentType "application/json" -Method GET
      Write-host "Files changed:"
      $commit.files | % {$_.filename}

      if ( $commit.files.filename -like "*EspFirmwareFlasher*" )
      {
        echo "##vso[task.setvariable variable=BUILD_ESP32TOOL;isOutput=true]true"  
      }
      else
      {
        echo "##vso[task.setvariable variable=BUILD_ESP32TOOL;isOutput=true]False"  
      }     

      if ( $commit.files.filename -like "*nanoFramework.Tools.Hex2Dfu*" )
      {
        echo "##vso[task.setvariable variable=BUILD_HEX2DFU;isOutput=true]true"  
      }
      else
      {
        echo "##vso[task.setvariable variable=BUILD_HEX2DFU;isOutput=true]False"  
      }
    name: BuildOptions
    displayName: get list of changed files

# build tools
- job: Build_tools
  # skip build if there are no changes in the tools
  condition: or( eq( dependencies.Get_Build_Options.outputs['BuildOptions.BUILD_ESP32TOOL'], true ), eq( dependencies.Get_Build_Options.outputs['BuildOptions.BUILD_HEX2DFU'], true ) )
  dependsOn:
  - Get_Build_Options

  pool:
    vmImage: 'VS2017-Win2016'

  strategy:
    matrix:
      ESP32_tool:
        solution: 'EspFirmwareFlasher\EspFirmwareFlasher.sln'
        toolName: 'ESP32 firmware flasher'
      HEX2DFU_tool:
        solution: 'nanoFramework.Tools.Hex2Dfu\nanoFramework.Tools.Hex2Dfu.sln'
        toolName: 'HEX2DFU utility'

  variables:
    buildPlatform: 'Any CPU'
    buildConfiguration: 'Release'
    optionBUILD_ESP32TOOL: $[ dependencies.Get_Build_Options.outputs['BuildOptions.BUILD_ESP32TOOL'] ]
    optionBUILD_HEX2DFU: $[ dependencies.Get_Build_Options.outputs['BuildOptions.BUILD_HEX2DFU'] ]

  steps:

  # check build
  - powershell: |
      if( ("$(toolName)" -eq "ESP32 firmware flasher") -and ("$(optionBUILD_ESP32TOOL)" -eq $true) )
      {
        echo "##vso[task.setvariable variable=GO]true"
      }
      elseif( ("$(toolName)" -eq "HEX2DFU utility") -and ("$(optionBUILD_HEX2DFU)" -eq $true) )
      {
        echo "##vso[task.setvariable variable=GO]true"
      }
      else
      {
        echo "##vso[task.setvariable variable=GO]false"
      }

  # need this here in order to persist GitHub credentials
  - checkout: self
    persistCredentials: true
    condition: eq(variables['GO'], true)

  - script: |
      git config --global user.email "nfbot"
      git config --global user.name "nanoframework@outlook.com"
    displayName: Setup git identity
    condition: eq(variables['GO'], true)

  - task: NuGetToolInstaller@0
    condition: eq(variables['GO'], true)

  - task: NuGetCommand@2
    inputs:
      restoreSolution: '$(solution)'
      verbosityRestore: quiet
    condition: eq(variables['GO'], true)

  - task: VSBuild@1
    inputs:
      solution: '$(solution)'
      platform: '$(buildPlatform)'
      configuration: '$(buildConfiguration)'
    condition: eq(variables['GO'], true)

  - task: CopyFiles@1
    inputs:
      sourceFolder: $(Build.SourcesDirectory)
      Contents: |
        **\bin\Release\*.exe
      TargetFolder: '$(Build.ArtifactStagingDirectory)'
      flattenFolders: true
    condition: and( succeeded(), eq(variables['GO'], true) )
    displayName: Collecting deployable artifacts

  # publish artifacts (only possible if this is not a PR originated on a fork)
  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: deployables
      ArtifactType: Container
    condition: and( succeeded(), eq(variables['GO'], true), ne(variables['system.pullrequest.isfork'], true) )
    displayName: Publish deployables artifacts

  # create or update GitHub release
  - task: GitHubReleasePublish@1
    inputs:
      githubEndpoint: 'nfbot'
      githubOwner: 'nanoframework'
      githubRepositoryName: 'nf-tools'
      githubTag: v$(NBGV_Version)
      githubReleaseTitle: 'nanoFramework $(toolName) v$(NBGV_Version)'
      githubReleaseNotes: 'add description here'
      githubTargetCommitsh: $(Build.SourceVersion)
      githubReleaseDraft: true
      githubReleasePrerelease: false
      githubReuseDraftOnly: true
      githubReuseRelease: true
      githubEditRelease: true
      githubReleaseAsset: '$(Build.ArtifactStagingDirectory)/*.exe'
    condition: and( succeeded(), eq(variables['GO'], true), not( startsWith(variables['Build.SourceBranch'], 'refs/pull') ) )
    displayName: Create/Update GitHub release

##################################
# report build failure to Discord
- job: Report_Build_Failure
  dependsOn:
  - Build_tools
  condition: failed('Build_tools')

  pool:
    vmImage: 'VS2017-Win2016'

  steps:

  - checkout: self
    fetchDepth: 1

  # step from template @ nf-tools repo
  - template: azure-pipelines-templates/discord-webhook.yml@templates  
    parameters:
      status: 'failure'
      webhookUrl: '$(DiscordWebhook)'
      message: ''
