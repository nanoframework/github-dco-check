# Copyright (c) .NET Foundation and Contributors
# Portions Copyright (c) Sankarsan Kampa (a.k.a. k3rn31p4nic).  All rights reserved.
# See LICENSE file in the project root for full license information.

parameters:
  skipNuGetRestore: false
  gitUser: 'nfbot'
  gitEmail: 'nanoframework@outlook.com'
  sonarCloudProject: 'dummy-key'
  nugetConfigPath: 'NuGet.config'
  msbuildExtraParams: ' '

steps:
# need this here in order to persist GitHub credentials 
- checkout: self

- script: |
    git config --global user.email ${{ parameters.gitEmail }}
    git config --global user.name ${{ parameters.gitUser }}
    git config --global core.autocrlf true
  displayName: Setup git identity

# get commit message
- powershell: |

    if($env:System_PullRequest_PullRequestId -ne $null)
    {
      # PR build, get PR message

      # need to get PR number from branch as the Azure Pipeline var can't be trusted
      if($env:Build_SourceBranch -match '(?<=(pull\/))\w*(?=(\/))')
      {
        $prNumber = $matches[0]

        $prUrl = "https://api.github.com/repos/$env:Build_Repository_Name/pulls/$prNumber"

        $commit = Invoke-RestMethod -Uri $prUrl -ContentType "application/json" -Method GET

        $commitMessage = $commit.body
      }
    }
    else
    {
      # not a PR, get subject and commit message for commit
      $commitMessage = git log --format='%B' -1
    }

    # need to flatten message by removing new lines
    $commitMessage = $commitMessage -replace "`r`n", " "

    # set variable to foward to jobs
    echo "##vso[task.setvariable variable=COMMIT_MESSAGE;isOutput=true]$commitMessage"
  name: getCommitMessage
  displayName: grab commit message

- template: install-nbgv-tool.yml

- template: prepare-release.yml

- task: SonarCloudPrepare@1
  condition: ne( variables['StartReleaseCandidate'], true )
  displayName: 'Prepare analysis on SonarCloud'
  inputs:
    SonarCloud: 'sonarcloud-$(System.TeamProject)'
    organization: 'nanoframework'
    scannerMode: 'MSBuild'
    projectKey: '${{ parameters.sonarCloudProject }}'

- task: NuGetToolInstaller@0
  inputs:
    versionSpec: '5.8.0'
  condition: ne( variables['StartReleaseCandidate'], true )
  displayName: 'Install specific version of NuGet'

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'
    feedsToUse: config
    nugetConfigPath: ${{ parameters.nugetConfigPath }}
  condition: and( succeeded(), not( ${{ parameters.skipNuGetRestore }} ), ne( variables['StartReleaseCandidate'], true ) )
  displayName: NuGet restore

- task: InstallnFBuildComponents@1
  condition: ne( variables['StartReleaseCandidate'], true )
  displayName: Install nanoFramework MSBuild components

- task: VSBuild@1
  inputs:
    solution: '$(solution)'
    platform: '$(buildPlatform)'
    msbuildArgs: '/p:PublicRelease=true ${{ parameters.msbuildExtraParams }}'
    configuration: '$(buildConfiguration)'
  condition: ne( variables['StartReleaseCandidate'], true )

# we don't have tests (yet)
# - task: VSTest@2
#   inputs:
#     platform: '$(buildPlatform)'
#     configuration: '$(buildConfiguration)'
#   condition: ne( variables['StartReleaseCandidate'], true )

- task: PowerShell@2
  inputs:
      targetType: 'inline'
      script: |
          $MyNuGetVersion = $env:NBGV_NuGetPackageVersion -replace "\-g$env:NBGV_GitCommitIdShort", ""

          # replace preview with alpha if this is a PR build
          if($env:System_PullRequest_PullRequestId -ne $null)
          {
            $MyNuGetVersion = $MyNuGetVersion -replace "preview", "alpha-pull_request" + $env:System_PullRequest_PullRequestId + "." + $env:NBGV_VersionHeight
          }

          if ($env:System_PullRequest_SourceBranch -like 'release*')
          {
            $MyNuGetVersion = $MyNuGetVersion + "-rc." + $env:NBGV_VersionHeight
          }

          Write-Host "NuGet build is: $MyNuGetVersion"
          Write-Host "Assembly version is: $env:NBGV_AssemblyVersion"

          Write-Host "$("##vso[task.setvariable variable=MY_NUGET_VERSION]")$MyNuGetVersion"
  condition: and( succeeded(), ne( variables['StartReleaseCandidate'], true ) )
  displayName: Get NuGet build number

- task: PowerShell@2
  inputs:
      targetType: 'inline'
      script: |

          $assemblyInfoFiles = (Get-ChildItem -Path ".\*" -Include "AssemblyInfo.cs" -Recurse)
          $attributeRegex = '(AssemblyNativeVersion\(\")+(\d+\.\d+\.\d+\.\d)+("\))'

          $attributeRegex = [regex]"(AssemblyNativeVersion\(\"")+(\d+\.\d+\.\d+\.\d)+(""\))"

          # read attribute from file
          $fileContent = Get-Content($assemblyInfoFiles[0])

          $attrib = $attributeRegex.Match($fileContent) 

          $nativeVersion = $attrib.Groups[2].value

          Write-Host "AssemblyNativeVersion is $nativeVersion"

          Write-Host "$("##vso[task.setvariable variable=ASSEMBLY_NATIVE_VERSION]")$nativeVersion"
  condition: and( succeeded(), ne( variables['StartReleaseCandidate'], true ) )
  displayName: Get AssemblyNativeVersion version

- powershell: |
    # get subject and commit message for commit
    $commitMessage = git log --format='%B' -1

    # need to flatten message by removing new lines
    $commitMessage = $commitMessage -replace "`r`n", " "

    if($commitMessage -like "*PUBLISH_RELEASE*")
    {
      # set variable
      Write-Host "$("##vso[task.setvariable variable=RELEASE_VERSION;isOutput=true]")true"
      Write-Host "Release draft: FALSE"
    }
    else
    {
      # set variable
      Write-Host "$("##vso[task.setvariable variable=RELEASE_VERSION;isOutput=true]")false"
      Write-Host "Release draft: TRUE"
    }
  name: SetReleaseDraftVar
  condition: ne( variables['StartReleaseCandidate'], true )
  displayName: Set release draft var

- task: SonarCloudAnalyze@1
  condition: and( succeeded(), ne( variables['StartReleaseCandidate'], true ) )
  displayName: 'Run Code Analysis'
  continueOnError: true

- task: SonarCloudPublish@1
  condition: and( succeeded(), ne( variables['StartReleaseCandidate'], true ) )
  displayName: 'Publish Quality Gate Result'
  continueOnError: true

- task: UseRubyVersion@0
  inputs:
    versionSpec: '>= 2.7' 
    addToPath: true
  condition: and( succeeded(), eq(variables['System.PullRequest.PullRequestId'], ''), ne( variables['StartReleaseCandidate'], true ) )
  displayName: Setup Ruby

# generate change log
- powershell: |
      gem install github_changelog_generator --quiet --no-document
      # need to call it passing both cache options with full path otherwise it won't work
      github_changelog_generator --token $(GitHubToken) --cache-log  $env:AGENT_TEMPDIRECTORY\github-changelog-logger.log --cache-file $env:AGENT_TEMPDIRECTORY\github-changelog-http-cache --pr-wo-labels
  condition: and( succeeded(), eq(variables['System.PullRequest.PullRequestId'], ''), not( startsWith(variables['Build.SourceBranch'], 'refs/tags/v') ), not( startsWith(variables['Build.SourceBranchName'], 'master') ), not( contains(variables['Build.SourceBranchName'], 'update-dependencies') ), ne( variables['StartReleaseCandidate'], true ) )
  displayName: Generate change log

# generate change log including future version
- powershell: |
      gem install github_changelog_generator --quiet --no-document
      # need to call it passing both cache options with full path otherwise it won't work
      github_changelog_generator --token $(GitHubToken) --cache-log  $env:AGENT_TEMPDIRECTORY\github-changelog-logger.log --cache-file $env:AGENT_TEMPDIRECTORY\github-changelog-http-cache --pr-wo-labels --future-release v$env:MY_NUGET_VERSION
  condition: and( succeeded(), or( eq ( variables['SetReleaseDraftVar.RELEASE_VERSION'], 'True' ), and ( eq(variables['System.PullRequest.PullRequestId'], ''), not( startsWith(variables['Build.SourceBranch'], 'refs/tags/v') ), startsWith(variables['Build.SourceBranchName'], 'master'), not( contains(variables['Build.SourceBranchName'], 'update-dependencies') ) ) ), ne( variables['StartReleaseCandidate'], true ) )
  displayName: Generate change log

# copy change log to artifacts directory
- task: CopyFiles@2
  inputs:
    SourceFolder: '$(System.DefaultWorkingDirectory)'
    Contents: 'CHANGELOG.md'
    TargetFolder: '$(Build.ArtifactStagingDirectory)'
  condition: and( succeeded(), eq(variables['System.PullRequest.PullRequestId'], ''), not( contains(variables['Build.SourceBranchName'], 'update-dependencies') ), ne( variables['StartReleaseCandidate'], true ) )
  displayName: Copy Changelog

# push new changelog to GitHub repo
- task: PowerShell@2
  condition: and( succeeded(), eq(variables['System.PullRequest.PullRequestId'], ''), not( startsWith(variables['Build.SourceBranch'], 'refs/tags/v') ), not( contains(variables['Build.SourceBranchName'], 'update-dependencies') ), ne( variables['StartReleaseCandidate'], true ) )
  displayName: Push changelog to GitHub
  continueOnError: true
  inputs:
      targetType: 'inline'
      script: |
          git add CHANGELOG.md
          git commit -m "Update CHANGELOG for v$(NBGV_Version)" -m"***NO_CI***"

          git config user.email ${{ parameters.gitEmail }}
          git config user.name ${{ parameters.gitUser }}
          
          # compute authorization header in format "AUTHORIZATION: basic 'encoded token'"
          # 'encoded token' is the Base64 of the string "nfbot:personal-token"
          $auth = "basic $([System.Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes("nfbot:$(GitHubToken)"))))"

          git -c http.extraheader="AUTHORIZATION: $auth" push origin "HEAD:$(Build.SourceBranchName)"

# update could build number (only possible if this is not a PR from a fork)
- task: PowerShell@2
  inputs:
      targetType: 'inline'
      script: |
        Write-Host "NuGet version is $("##vso[build.updatebuildnumber]")$env:MY_NUGET_VERSION"
        Write-Host "Build version is $env:NBGV_AssemblyVersion"
  condition: and( succeeded(), ne(variables['system.pullrequest.isfork'], true), ne( variables['StartReleaseCandidate'], true ) )
  displayName: Update cloud build number

- task: NuGetCommand@2
  inputs:
    command: 'custom' 
    arguments: 'pack $(nugetPackageName).nuspec -Version $(MY_NUGET_VERSION) -Symbols -SymbolPackageFormat snupkg -properties nativeVersion="$(ASSEMBLY_NATIVE_VERSION)";commit="$(Build.SourceVersion)";checksum="$(NativeAssemblyChecksum)"'
  condition: and( succeeded(), ne( variables['StartReleaseCandidate'], true ) )
  displayName: Pack NuGet with class library

# - task: NuGetCommand@2
#   inputs:
#     command: 'custom' 
#     arguments: 'pack $(nugetPackageName).DELIVERABLES.nuspec -Version $(MY_NUGET_VERSION)'
#     displayName: Pack NuGet with build deliverables class library

- task: CopyFiles@1
  inputs:
    sourceFolder: $(Build.SourcesDirectory)
    Contents: |
      **\$(nugetPackageName)*.nupkg
      **\$(nugetPackageName)*.snupkg
      **\CHANGELOG.md
    TargetFolder: '$(Build.ArtifactStagingDirectory)'
    flattenFolders: true
  condition: and( succeeded(), ne( variables['StartReleaseCandidate'], true ) )
  displayName: Collecting deployable artifacts

- task: DotNetCoreCLI@2
  displayName: Install SignTool tool
  inputs:
    command: custom
    custom: tool
    arguments: install --tool-path . SignClient

- pwsh: |
    .\SignClient "Sign" `
    --baseDirectory "$(Build.ArtifactStagingDirectory)" `
    --input "**/*.nupkg" `
    --config "$(Build.Repository.LocalPath)\config\SignClient.json" `
    --filelist "$(Build.Repository.LocalPath)\config\filelist.txt" `
    --user "$(SignClientUser)" `
    --secret '$(SignClientSecret)' `
    --name "$(nugetPackageName)" `
    --description "$(nugetPackageName)" `
    --descriptionUrl "https://github.com/$env:Build_Repository_Name"
  displayName: Sign packages

# publish artifacts (only possible if this is not a PR originated on a fork)
- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: deployables
    ArtifactType: Container
  condition: and( succeeded(), ne(variables['system.pullrequest.isfork'], true), ne( variables['StartReleaseCandidate'], true ) )
  displayName: Publish deployables artifacts

# push NuGet packages to AzureArtifacts feed (always happens)
- task: NuGetCommand@2
  inputs:
    command: push
    nuGetFeedType: external
    allowPackageConflicts: true
    packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
    includeSymbols: true
    publishFeedCredentials: 'AzureArtifacts-$(System.TeamProject)'
  condition: and( succeeded(), ne( variables['StartReleaseCandidate'], true ) )
  continueOnError: true
  displayName: Push NuGet packages to AzureArtifacts

# push NuGet class lib package to NuGet (happens on every build except PRs)
- task: NuGetCommand@2
  inputs:
    command: push
    nuGetFeedType: external
    allowPackageConflicts: true
    packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
    includeSymbols: true
    publishFeedCredentials: 'NuGet-$(System.TeamProject)'
  condition: and( succeeded(), eq(variables['System.PullRequest.PullRequestId'], ''), ne( variables['StartReleaseCandidate'], true ) )
  continueOnError: true
  displayName: Push NuGet packages to NuGet

# create or update GitHub release
- task: GitHubReleasePublish@1
  inputs:
    githubEndpoint: 'nanoframework'
    githubOwner: 'nanoframework'
    githubRepositoryName: $(repoName)
    githubTag: v$(MY_NUGET_VERSION)
    githubReleaseTitle: '$(nugetPackageName) Library v$(MY_NUGET_VERSION)'
    githubReleaseNotes: 'Check the [changelog]($(Build.Repository.Uri)/blob/$(Build.SourceBranchName)/CHANGELOG.md).<br><br><h4>Install from NuGet</h4><br>The following NuGet packages are available for download from this release:<br>:package: [.NET](https://www.nuget.org/packages/$(nugetPackageName)/$(MY_NUGET_VERSION)) v$(MY_NUGET_VERSION).'
    githubTargetCommitsh: $(Build.SourceVersion)
    githubReleaseDraft: false
    githubReleasePrerelease: true
    githubReuseDraftOnly: false
    githubReuseRelease: false
    githubEditRelease: false
    githubDeleteEmptyTag: true
    githubReleaseAsset: '$(Build.ArtifactStagingDirectory)/$(nugetPackageName).$(MY_NUGET_VERSION).nupkg'
  condition: and( succeeded(), eq(variables['System.PullRequest.PullRequestId'], ''), not( startsWith(variables['Build.SourceBranch'], 'refs/tags/v') ), ne( variables['StartReleaseCandidate'], true ) )
  displayName: Create/Update GitHub PREVIEW release

# create or update GitHub release ON tags from release or master branches
- task: GitHubReleasePublish@1
  inputs:
    githubEndpoint: 'nanoframework'
    githubOwner: 'nanoframework'
    githubRepositoryName: $(repoName)
    githubTag: v$(MY_NUGET_VERSION)
    githubReleaseTitle: '$(nugetPackageName) Library v$(MY_NUGET_VERSION)'
    githubReleaseNotes: 'Check the [changelog]($(Build.Repository.Uri)/blob/$(Build.SourceBranchName)/CHANGELOG.md).<br><br><h4>Install from NuGet</h4><br>The following NuGet packages are available for download from this release:<br>:package: [.NET](https://www.nuget.org/packages/$(nugetPackageName)/$(MY_NUGET_VERSION)) v$(MY_NUGET_VERSION).'
    githubTargetCommitsh: $(Build.SourceVersion)
    githubReleaseDraft: false
    githubReleasePrerelease: false
    githubReuseDraftOnly: false
    githubReuseRelease: true
    githubEditRelease: false
    githubDeleteEmptyTag: true
    githubReleaseAsset: '$(Build.ArtifactStagingDirectory)/$(nugetPackageName).$(MY_NUGET_VERSION).nupkg'
  condition: and( succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/v'), not(contains(variables['Build.SourceBranch'], 'preview') ), ne( variables['StartReleaseCandidate'], true ) )
  displayName: Create/Update GitHub stable release
